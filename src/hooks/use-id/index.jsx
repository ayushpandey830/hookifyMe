import { useId } from "react";

export const UseIdExample = () => {
  const id = useId();
  const id2 = useId();

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start",
        gap: "10px",
        fontFamily: "Arial, sans-serif",
        padding: "20px",
       
        margin: "auto",
      }}
    >
      <label htmlFor={id} style={{ fontWeight: "bold",color:"red" }}>Enter your name:</label>
      <input
        id={id}
        type="text"
        style={{
          width: "60%",
          padding: "8px",
          borderRadius: "5px",
          border: "1px solid #ccc",
          fontSize: "14px",
          color:"red",
        }}
      />

      <label htmlFor={id2} style={{ fontWeight: "bold", color:"red" }}>Enter your name:</label>
      <input
        id={id2}
        type="text"
        style={{
          width: "60%",
          padding: "8px",
          borderRadius: "5px",
          border: "1px solid #ccc",
          fontSize: "14px",
          color: "red",

        }}
      />

          
      <div style={{ marginTop: "20px",color:"green" }}>
        <h3>Explanation:</h3>
        <div dangerouslySetInnerHTML={{
          __html: `
          <ul>
            <li><b>What is useId?</b>: A React Hook that generates <b>stable, unique IDs</b> for accessibility and form elements.</li>
            <li><b>Why use it?</b>: Prevents ID duplication when multiple instances of a component exist.</li>
            <li><b>Unique IDs for Labels & Inputs:</b> The IDs generated by <code>useId</code> are assigned to <code>&lt;label&gt;</code> and <code>&lt;input&gt;</code> elements for accessibility.</li>
            <li><b>Consistency in SSR:</b> Ensures IDs remain the same on both server and client, avoiding hydration issues.</li>
            <li><b>Each call generates a different ID:</b> Calling <code>useId()</code> multiple times within a component creates unique values.</li>
            <li><b>Better than Math.random:</b> Ensures uniqueness without conflicts in large apps.</li>
            <li><b>Useful in Dynamic Forms:</b> Helps when multiple input fields need unique identifiers.</li>
            <li><b>Works only inside Components:</b> <code>useId()</code> must be called within a React functional component.</li>
            <li><b>Not for Element Keys:</b> Should not be used for <code>key</code> props in lists.</li>
            <li><b>Ensures Accessibility:</b> Using <code>htmlFor</code> with <code>useId()</code> links labels correctly to inputs, improving screen reader support.</li>
          </ul>
        ` }} />
      </div>
    </div>
  );
};
